"""Initial migration

Revision ID: a23abb777e0f
Revises: 
Create Date: 2025-04-28 14:54:21.047755

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a23abb777e0f'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('benchmarks',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('score_benchmark', sa.Float(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('votes', sa.Integer(), nullable=True),
    sa.Column('rank', sa.Integer(), nullable=True),
    sa.Column('arena_score', sa.Float(), nullable=True),
    sa.Column('confidence_interval', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('project_budgets',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('currency', sa.String(length=255), nullable=False),
    sa.Column('period', sa.String(length=255), nullable=False),
    sa.Column('alert_threshold', sa.Float(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('providers',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('website', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tasks',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('task_name', sa.String(length=255), nullable=False),
    sa.Column('task_category', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('user_mail', sa.String(length=255), nullable=False),
    sa.Column('role', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('user_mail')
    )
    op.create_table('models',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('provider_id', sa.Integer(), nullable=False),
    sa.Column('license', sa.String(length=255), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('context_window', sa.Integer(), nullable=True),
    sa.Column('max_tokens', sa.Integer(), nullable=True),
    sa.Column('parameters', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['provider_id'], ['providers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_project_budgets',
    sa.Column('user_mail', sa.String(length=255), nullable=False),
    sa.Column('project_budget_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['project_budget_id'], ['project_budgets.id'], ),
    sa.ForeignKeyConstraint(['user_mail'], ['users.user_mail'], ),
    sa.PrimaryKeyConstraint('user_mail', 'project_budget_id')
    )
    op.create_table('alerts',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('type', sa.String(length=255), nullable=False),
    sa.Column('severity', sa.String(length=255), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('user_mail', sa.String(length=255), nullable=True),
    sa.Column('project_budget_id', sa.Integer(), nullable=True),
    sa.Column('model_id', sa.Integer(), nullable=True),
    sa.Column('resolved', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], ),
    sa.ForeignKeyConstraint(['project_budget_id'], ['project_budgets.id'], ),
    sa.ForeignKeyConstraint(['user_mail'], ['users.user_mail'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('benchmark_results',
    sa.Column('model_id', sa.Integer(), nullable=False),
    sa.Column('benchmark_id', sa.Integer(), nullable=False),
    sa.Column('score', sa.Float(), nullable=True),
    sa.Column('evaluation_date', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['benchmark_id'], ['benchmarks.id'], ),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], ),
    sa.PrimaryKeyConstraint('model_id', 'benchmark_id')
    )
    op.create_table('model_history',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('model_id', sa.Integer(), nullable=False),
    sa.Column('input_cost', sa.Float(), nullable=False),
    sa.Column('output_cost', sa.Float(), nullable=False),
    sa.Column('training_cost', sa.Float(), nullable=True),
    sa.Column('currency', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('model_tasks',
    sa.Column('model_id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], ),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ),
    sa.PrimaryKeyConstraint('model_id', 'task_id')
    )
    op.create_table('pricing',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('model_id', sa.Integer(), nullable=False),
    sa.Column('input_cost', sa.Float(), nullable=True),
    sa.Column('output_cost', sa.Float(), nullable=True),
    sa.Column('cached_input', sa.Float(), nullable=True),
    sa.Column('training_cost', sa.Float(), nullable=True),
    sa.Column('token_unit', sa.String(length=255), nullable=False),
    sa.Column('currency', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('pricing')
    op.drop_table('model_tasks')
    op.drop_table('model_history')
    op.drop_table('benchmark_results')
    op.drop_table('alerts')
    op.drop_table('user_project_budgets')
    op.drop_table('models')
    op.drop_table('users')
    op.drop_table('tasks')
    op.drop_table('providers')
    op.drop_table('project_budgets')
    op.drop_table('benchmarks')
    # ### end Alembic commands ###
